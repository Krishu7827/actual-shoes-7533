{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = set;\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\nvar _index2 = _interopRequireDefault(require(\"../setMonth/index.js\"));\nvar _index3 = _interopRequireDefault(require(\"../_lib/toInteger/index.js\"));\nvar _index4 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n/**\n * @name set\n * @category Common Helpers\n * @summary Set date values to a given date.\n *\n * @description\n * Set date values to a given date.\n *\n * Sets time values to date from object `values`.\n * A value is not set if it is undefined or null or doesn't exist in `values`.\n *\n * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\n * to use native `Date#setX` methods. If you use this function, you may not want to include the\n * other `setX` functions that date-fns provides if you are concerned about the bundle size.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Object} values - an object with options\n * @param {Number} [values.year] - the number of years to be set\n * @param {Number} [values.month] - the number of months to be set\n * @param {Number} [values.date] - the number of days to be set\n * @param {Number} [values.hours] - the number of hours to be set\n * @param {Number} [values.minutes] - the number of minutes to be set\n * @param {Number} [values.seconds] - the number of seconds to be set\n * @param {Number} [values.milliseconds] - the number of milliseconds to be set\n * @returns {Date} the new date with options set\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `values` must be an object\n *\n * @example\n * // Transform 1 September 2014 into 20 October 2015 in a single line:\n * const result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\n * //=> Tue Oct 20 2015 00:00:00\n *\n * @example\n * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\n * const result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\n * //=> Mon Sep 01 2014 12:23:45\n */\nfunction set(dirtyDate, values) {\n  (0, _index4.default)(2, arguments);\n  if ((0, _typeof2.default)(values) !== 'object' || values === null) {\n    throw new RangeError('values parameter must be an object');\n  }\n  var date = (0, _index.default)(dirtyDate);\n\n  // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n  if (isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n  if (values.year != null) {\n    date.setFullYear(values.year);\n  }\n  if (values.month != null) {\n    date = (0, _index2.default)(date, values.month);\n  }\n  if (values.date != null) {\n    date.setDate((0, _index3.default)(values.date));\n  }\n  if (values.hours != null) {\n    date.setHours((0, _index3.default)(values.hours));\n  }\n  if (values.minutes != null) {\n    date.setMinutes((0, _index3.default)(values.minutes));\n  }\n  if (values.seconds != null) {\n    date.setSeconds((0, _index3.default)(values.seconds));\n  }\n  if (values.milliseconds != null) {\n    date.setMilliseconds((0, _index3.default)(values.milliseconds));\n  }\n  return date;\n}\nmodule.exports = exports.default;","map":{"version":3,"names":["_interopRequireDefault","require","default","Object","defineProperty","exports","value","set","_typeof2","_index","_index2","_index3","_index4","dirtyDate","values","arguments","RangeError","date","isNaN","getTime","Date","NaN","year","setFullYear","month","setDate","hours","setHours","minutes","setMinutes","seconds","setSeconds","milliseconds","setMilliseconds","module"],"sources":["C:/Users/mazha/OneDrive/Desktop/actual-shoes-7533/my-app/node_modules/date-fns/set/index.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = set;\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\nvar _index2 = _interopRequireDefault(require(\"../setMonth/index.js\"));\nvar _index3 = _interopRequireDefault(require(\"../_lib/toInteger/index.js\"));\nvar _index4 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n/**\n * @name set\n * @category Common Helpers\n * @summary Set date values to a given date.\n *\n * @description\n * Set date values to a given date.\n *\n * Sets time values to date from object `values`.\n * A value is not set if it is undefined or null or doesn't exist in `values`.\n *\n * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\n * to use native `Date#setX` methods. If you use this function, you may not want to include the\n * other `setX` functions that date-fns provides if you are concerned about the bundle size.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Object} values - an object with options\n * @param {Number} [values.year] - the number of years to be set\n * @param {Number} [values.month] - the number of months to be set\n * @param {Number} [values.date] - the number of days to be set\n * @param {Number} [values.hours] - the number of hours to be set\n * @param {Number} [values.minutes] - the number of minutes to be set\n * @param {Number} [values.seconds] - the number of seconds to be set\n * @param {Number} [values.milliseconds] - the number of milliseconds to be set\n * @returns {Date} the new date with options set\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `values` must be an object\n *\n * @example\n * // Transform 1 September 2014 into 20 October 2015 in a single line:\n * const result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\n * //=> Tue Oct 20 2015 00:00:00\n *\n * @example\n * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\n * const result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\n * //=> Mon Sep 01 2014 12:23:45\n */\nfunction set(dirtyDate, values) {\n  (0, _index4.default)(2, arguments);\n  if ((0, _typeof2.default)(values) !== 'object' || values === null) {\n    throw new RangeError('values parameter must be an object');\n  }\n  var date = (0, _index.default)(dirtyDate);\n\n  // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n  if (isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n  if (values.year != null) {\n    date.setFullYear(values.year);\n  }\n  if (values.month != null) {\n    date = (0, _index2.default)(date, values.month);\n  }\n  if (values.date != null) {\n    date.setDate((0, _index3.default)(values.date));\n  }\n  if (values.hours != null) {\n    date.setHours((0, _index3.default)(values.hours));\n  }\n  if (values.minutes != null) {\n    date.setMinutes((0, _index3.default)(values.minutes));\n  }\n  if (values.seconds != null) {\n    date.setSeconds((0, _index3.default)(values.seconds));\n  }\n  if (values.milliseconds != null) {\n    date.setMilliseconds((0, _index3.default)(values.milliseconds));\n  }\n  return date;\n}\nmodule.exports = exports.default;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}